import numpy as np
import scipy as sp

#Unlike idw, this contains routines for sampling from probability distributions
#generated by weighting samples by the inverses of distances

def normalize_weights(w):
    return w / np.sum(w)

#Given a numpy array of distances, returns the sampled index with idw sampling
def idw_sample_from_dists(dists, exponent):
    num_dists = dists.shape[0]
    if (np.amin(dists) == 0.0):
        probs = np.zeros_like(dists)
        probs[dists == 0] = 1.0 
        probs = normalize_weights(probs)
        index = np.random.choice(range(num_dists), p=probs)
        return index
    powered = np.power(dists, -exponent)
    normed = normalize_weights(powered)
    index = np.random.choice(range(num_dists), p=normed)
    return index
